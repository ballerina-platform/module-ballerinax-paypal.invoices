// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/data.jsondata;
import ballerina/http;

# Use the Invoicing API to create, send, and manage invoices. You can also use the API or webhooks to track invoice payments. When you send an invoice to a customer, the invoice moves from draft to payable state. PayPal then emails the customer a link to the invoice on the PayPal website. Customers with a PayPal account can log in and pay the invoice with PayPal. Alternatively, customers can pay as a guest with a debit card or credit card. For more information, see the <a href="/docs/invoicing/">Invoicing Overview</a> and the <a href="/docs/invoicing/basic-integration/">Invoicing Integration Guide</a>.
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl = "https://api-m.sandbox.paypal.com/v2/invoicing") returns error? {
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        self.clientEp = check new (serviceUrl, httpClientConfig);
    }

    # List invoices
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - A successful request returns the HTTP `200 OK` status code and a JSON response body that lists invoices with details 
    resource isolated function get invoices(map<string|string[]> headers = {}, *InvoicesListQueries queries) returns Invoices|error {
        string resourcePath = string `/invoices`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create draft invoice
    #
    # + headers - Headers to be sent with the request 
    # + payload - The invoice details which includes all information of the invoice like items, billing information 
    # + return - A successful request returns the HTTP `201 Created` status code. A JSON response body that shows invoice details is returned if you set <code>prefer=return=representation</code> 
    resource isolated function post invoices(Invoice payload, InvoicesCreateHeaders headers = {}) returns Invoice|error {
        string resourcePath = string `/invoices`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Send invoice
    #
    # + invoiceId - The ID of the draft invoice to delete
    # + headers - Headers to be sent with the request 
    # + payload - The email or SMS notification to send to the payer when they send an invoice. 
    # + return - A successful request returns the HTTP `200 OK` when the invoice issue date is current date 
    resource isolated function post invoices/[string invoiceId]/send(Notification payload, map<string|string[]> headers = {}) returns LinkDescription|'202Response|error {
        string resourcePath = string `/invoices/${getEncodedUri(invoiceId)}/send`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Send invoice reminder
    #
    # + invoiceId - The ID of the draft invoice to delete
    # + headers - Headers to be sent with the request 
    # + payload - The email or SMS notification that will be sent to the payer for reminder 
    # + return - A successful request returns the HTTP `204 No Content` status code with no JSON response body 
    resource isolated function post invoices/[string invoiceId]/remind(Notification payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/invoices/${getEncodedUri(invoiceId)}/remind`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Cancel sent invoice
    #
    # + invoiceId - The ID of the draft invoice to delete
    # + headers - Headers to be sent with the request 
    # + payload - The email or SMS notification that will be sent to the payer on cancellation 
    # + return - A successful request returns the HTTP `204 No Content` status code with no JSON response body 
    resource isolated function post invoices/[string invoiceId]/cancel(Notification payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/invoices/${getEncodedUri(invoiceId)}/cancel`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Record payment for invoice
    #
    # + invoiceId - The ID of the draft invoice to delete
    # + headers - Headers to be sent with the request 
    # + payload - The details of the payment to record against the invoice 
    # + return - A successful request returns the HTTP `200 Created` status code and a reference to the recorded payment 
    resource isolated function post invoices/[string invoiceId]/payments(PaymentDetail payload, map<string|string[]> headers = {}) returns PaymentReference|error {
        string resourcePath = string `/invoices/${getEncodedUri(invoiceId)}/payments`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Delete external payment
    #
    # + invoiceId - The ID of the draft invoice to delete
    # + transactionId - The ID of the external refund transaction to delete
    # + headers - Headers to be sent with the request 
    # + return - A successful request returns the HTTP `204 No Content` status code with no JSON response body 
    resource isolated function delete invoices/[string invoiceId]/payments/[string transactionId](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/invoices/${getEncodedUri(invoiceId)}/payments/${getEncodedUri(transactionId)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Record refund for invoice
    #
    # + invoiceId - The ID of the draft invoice to delete
    # + headers - Headers to be sent with the request 
    # + payload - The details of the refund to record against the invoice 
    # + return - A successful request returns the HTTP `200 Created` status code and a reference to the recorded refund 
    resource isolated function post invoices/[string invoiceId]/refunds(RefundDetail payload, map<string|string[]> headers = {}) returns RefundReference|error {
        string resourcePath = string `/invoices/${getEncodedUri(invoiceId)}/refunds`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Delete external refund
    #
    # + invoiceId - The ID of the draft invoice to delete
    # + transactionId - The ID of the external refund transaction to delete
    # + headers - Headers to be sent with the request 
    # + return - A successful request returns the HTTP `204 No Content` status code with no JSON response body 
    resource isolated function delete invoices/[string invoiceId]/refunds/[string transactionId](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/invoices/${getEncodedUri(invoiceId)}/refunds/${getEncodedUri(transactionId)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Generate QR code
    #
    # + invoiceId - The ID of the draft invoice to delete
    # + headers - Headers to be sent with the request 
    # + payload - Optional configuration parameters to adjust QR code width, height and the encoded URL 
    # + return - A successful request returns the HTTP `200 OK` status code and a JSON response body that shows the QR code as a PNG image 
    resource isolated function post invoices/[string invoiceId]/generate\-qr\-code(QrConfig payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/invoices/${getEncodedUri(invoiceId)}/generate-qr-code`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Generate invoice number
    #
    # + headers - Headers to be sent with the request 
    # + return - A successful request returns the HTTP `200 OK` status code and a JSON response body that shows the next invoice number 
    resource isolated function post generate\-next\-invoice\-number(InvoicingGenerateNextInvoiceNumberHeaders headers = {}) returns InvoiceNumber|error {
        string resourcePath = string `/generate-next-invoice-number`;
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Show invoice details
    #
    # + invoiceId - The ID of the draft invoice to delete
    # + headers - Headers to be sent with the request 
    # + return - A successful request returns the HTTP `200 OK` status code and a JSON response body that shows invoice details 
    resource isolated function get invoices/[string invoiceId](map<string|string[]> headers = {}) returns Invoice|error {
        string resourcePath = string `/invoices/${getEncodedUri(invoiceId)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Fully update invoice
    #
    # + invoiceId - The ID of the draft invoice to delete
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - A representation of changes to make in the invoice 
    # + return - A successful request returns the HTTP `200 OK` status code. A JSON response body that shows invoice details is returned if you set <code>prefer=return=representation</code> 
    resource isolated function put invoices/[string invoiceId](Invoice payload, InvoicesUpdateHeaders headers = {}, *InvoicesUpdateQueries queries) returns Invoice|error {
        string resourcePath = string `/invoices/${getEncodedUri(invoiceId)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headers);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Delete invoice
    #
    # + invoiceId - The ID of the draft invoice to delete
    # + headers - Headers to be sent with the request 
    # + return - A successful request returns the HTTP `204 No Content` status code with no JSON response body 
    resource isolated function delete invoices/[string invoiceId](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/invoices/${getEncodedUri(invoiceId)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Search for invoices
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + payload - The invoice search can be used to retrieve the invoices based on the search parameters 
    # + return - A successful request returns the HTTP `200 OK` status code and a JSON response body that lists the invoices that match the search criteria 
    resource isolated function post search\-invoices(SearchData payload, map<string|string[]> headers = {}, *InvoicesSearchInvoicesQueries queries) returns Invoices|error {
        string resourcePath = string `/search-invoices`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # List templates
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - A successful request returns the HTTP `200 OK` status code and a JSON response body that lists invoices 
    resource isolated function get templates(map<string|string[]> headers = {}, *TemplatesListQueries queries) returns Templates|error {
        string resourcePath = string `/templates`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create template
    #
    # + headers - Headers to be sent with the request 
    # + return - A successful request returns the HTTP `201 Created` status code. A JSON response body that shows template details is returned if you set <code>prefer=return=representation</code> 
    resource isolated function post templates(Template payload, map<string|string[]> headers = {}) returns Template|error {
        string resourcePath = string `/templates`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Show template details
    #
    # + templateId - The ID of the template to delete
    # + headers - Headers to be sent with the request 
    # + return - A successful request returns the HTTP `200 OK` status code and a JSON response body that shows template details 
    resource isolated function get templates/[string templateId](map<string|string[]> headers = {}) returns Template|error {
        string resourcePath = string `/templates/${getEncodedUri(templateId)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Fully update template
    #
    # + templateId - The ID of the template to delete
    # + headers - Headers to be sent with the request 
    # + payload - A representation of changes to make in the template 
    # + return - A successful request returns the HTTP `200 OK` status code. A JSON response body that shows template details is returned if you set <code>prefer=return=representation</code> 
    resource isolated function put templates/[string templateId](Template payload, map<string|string[]> headers = {}) returns Template|error {
        string resourcePath = string `/templates/${getEncodedUri(templateId)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete template
    #
    # + templateId - The ID of the template to delete
    # + headers - Headers to be sent with the request 
    # + return - A successful request returns the HTTP `204 No Content` status code with no JSON response body 
    resource isolated function delete templates/[string templateId](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/templates/${getEncodedUri(templateId)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }
}
